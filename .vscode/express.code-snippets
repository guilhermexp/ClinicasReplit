{
  "Express Route": {
    "prefix": "exroute",
    "body": [
      "router.${1|get,post,put,delete,patch|}('/${2:path}', async (req, res) => {",
      "  try {",
      "    $0",
      "    res.status(200).json({ success: true, data: ${3} });",
      "  } catch (error) {",
      "    console.error('Error:', error);",
      "    res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "  }",
      "});"
    ],
    "description": "Express route handler with try/catch"
  },
  "Express Router": {
    "prefix": "exrouter",
    "body": [
      "import express from 'express';",
      "",
      "const router = express.Router();",
      "",
      "$0",
      "",
      "export default router;"
    ],
    "description": "Express router setup"
  },
  "Express Middleware": {
    "prefix": "exmiddleware",
    "body": [
      "export const ${1:middlewareName} = (req, res, next) => {",
      "  try {",
      "    $0",
      "    next();",
      "  } catch (error) {",
      "    console.error('Error in ${1:middlewareName}:', error);",
      "    res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "  }",
      "};"
    ],
    "description": "Express middleware function"
  },
  "Express Auth Middleware": {
    "prefix": "exauthmiddleware",
    "body": [
      "export const isAuthenticated = (req, res, next) => {",
      "  if (!req.isAuthenticated()) {",
      "    return res.status(401).json({ success: false, message: 'Não autorizado' });",
      "  }",
      "  next();",
      "};"
    ],
    "description": "Express authentication middleware"
  },
  "Express Role Middleware": {
    "prefix": "exrolemiddleware",
    "body": [
      "export const hasRole = (role) => {",
      "  return (req, res, next) => {",
      "    if (!req.isAuthenticated()) {",
      "      return res.status(401).json({ success: false, message: 'Não autorizado' });",
      "    }",
      "    ",
      "    if (!req.user.roles.includes(role)) {",
      "      return res.status(403).json({ success: false, message: 'Acesso negado' });",
      "    }",
      "    ",
      "    next();",
      "  };",
      "};"
    ],
    "description": "Express role-based middleware"
  },
  "Express Validation Middleware": {
    "prefix": "exvalidation",
    "body": [
      "import { z } from 'zod';",
      "",
      "const ${1:schema} = z.object({",
      "  $2",
      "});",
      "",
      "export const validate${3:Resource} = (req, res, next) => {",
      "  try {",
      "    const result = ${1:schema}.safeParse(req.${4|body,params,query|});",
      "    ",
      "    if (!result.success) {",
      "      return res.status(400).json({",
      "        success: false,",
      "        message: 'Dados inválidos',",
      "        errors: result.error.errors",
      "      });",
      "    }",
      "    ",
      "    req.${4|body,params,query|} = result.data;",
      "    next();",
      "  } catch (error) {",
      "    console.error('Validation error:', error);",
      "    res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "  }",
      "};"
    ],
    "description": "Express validation middleware with Zod"
  },
  "Express Controller": {
    "prefix": "excontroller",
    "body": [
      "import { Request, Response } from 'express';",
      "",
      "export class ${1:Name}Controller {",
      "  async getAll(req: Request, res: Response) {",
      "    try {",
      "      $2",
      "      return res.status(200).json({ success: true, data: ${3} });",
      "    } catch (error) {",
      "      console.error('Error:', error);",
      "      return res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "    }",
      "  }",
      "  ",
      "  async getById(req: Request, res: Response) {",
      "    try {",
      "      const { id } = req.params;",
      "      $4",
      "      return res.status(200).json({ success: true, data: ${5} });",
      "    } catch (error) {",
      "      console.error('Error:', error);",
      "      return res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "    }",
      "  }",
      "  ",
      "  async create(req: Request, res: Response) {",
      "    try {",
      "      const data = req.body;",
      "      $6",
      "      return res.status(201).json({ success: true, data: ${7} });",
      "    } catch (error) {",
      "      console.error('Error:', error);",
      "      return res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "    }",
      "  }",
      "  ",
      "  async update(req: Request, res: Response) {",
      "    try {",
      "      const { id } = req.params;",
      "      const data = req.body;",
      "      $8",
      "      return res.status(200).json({ success: true, data: ${9} });",
      "    } catch (error) {",
      "      console.error('Error:', error);",
      "      return res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "    }",
      "  }",
      "  ",
      "  async delete(req: Request, res: Response) {",
      "    try {",
      "      const { id } = req.params;",
      "      $10",
      "      return res.status(200).json({ success: true, message: 'Recurso excluído com sucesso' });",
      "    } catch (error) {",
      "      console.error('Error:', error);",
      "      return res.status(500).json({ success: false, message: 'Erro interno do servidor' });",
      "    }",
      "  }",
      "}"
    ],
    "description": "Express controller class with CRUD methods"
  }
}
